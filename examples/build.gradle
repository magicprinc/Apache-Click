plugins {
  id 'java'
  id 'war'
  id 'application'
  id 'idea'

  alias(libs.plugins.tomcat)

  alias(libs.plugins.lombok)
  alias(libs.plugins.sonarLint)
  alias(libs.plugins.errorProne)
}

//java { // https://docs.gradle.org/current/userguide/toolchains.html
//  toolchain { languageVersion = JavaLanguageVersion.of(8) }}

repositories {
  mavenLocal()
  jcenter() // helps with JMS!
  maven {
    url "https://repository.jboss.org/maven2" // "https://repository.jboss.org/nexus/content/groups/public"
  }
  maven {
    url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/"
  }
  mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters', '-g', '-Xmaxwarns', '999'])
  options.release.set(17) // javac --release 7..21+
  options.deprecation = true

  options.errorprone {
    enabled = true
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/(generated|test).*/.*"
    disable("MissingSummary")
    disable("UnusedVariable")
    errorproneArgs = ["--illegal-access=warn"]
  }
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:latest.release"

  implementation("javax.annotation:javax.annotation-api:1.3.+") // @Resource

  implementation libs.servletApi

  implementation libs.bundles.spring
  implementation libs.bundles.springSecurity

  implementation project(':click')
  implementation project(':click-extras')
  implementation project(':click-cayenne')
  implementation project(':click-velocity')

  implementation 'org.apache.cayenne:cayenne-server:3.0.2'
  implementation("org.apache.poi:poi:3.6")
  implementation("opensymphony:quartz:1.6.+")
  implementation("org.objectstyle.ashwood:ashwood:2.0")
	implementation('commons-collections:commons-collections:3.+')


  implementation("hsqldb:hsqldb:1.8.0.10")
  implementation("javax.servlet:jstl:1.1.2")
  implementation("opensymphony:oscache:2.4.1", "javax.jms:jms:1.1")
  implementation("taglibs:standard:1.1.2")

  // we need to put it in .war
  implementation 'org.slf4j:slf4j-simple:1.7.+'

  //*** TEST TEST TEST

  testImplementation libs.bundles.junit

  testImplementation project(':click-mock')

  tomcat libs.bundles.tomcat // https://github.com/bmuschko/gradle-tomcat-plugin + alias(libs.plugins.tomcat)

  modules {
    module('velocity:velocity') {
      replacedBy 'org.apache.velocity:velocity', 'Use 1.7 instead of 1.3'
    }
  }
}
configurations.configureEach { // .implementation  // https://tomgregory.com/how-to-exclude-gradle-dependencies/
	exclude group: "velocity", module: "velocity" // 1.3 they come from somewhere..
	exclude group: "commons-logging", module: "commons-logging" // spring?
	exclude group: 'org.springframework', module: 'spring-jcl'
	exclude group: "org.apache.logging.log4j", module: "log4j-api"
	exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	exclude group: "log4j", module: "log4j"
	exclude group: "org.jboss.slf4j", module: "slf4j-jboss-logmanager"

	exclude group: "com.mchange", module: "c3p0"
	exclude group: 'com.google.guava', module: 'listenablefuture'
	exclude group: "javax.servlet", module: "servlet-api"
}

idea { module { downloadJavadoc = true; downloadSources = true } }

test {
  useJUnit()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  systemProperty("file.encoding", "UTF-8")
  systemProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
lombok { version = "latest.release" }
sonarLint { ignoreFailures = true }
tasks.named("sonarlintMain").configure {
	onlyIf { // gradle build -Psonarlint=true  -or- -Dsonarlint=true
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}
tasks.named("sonarlintTest").configure {
	onlyIf {
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}