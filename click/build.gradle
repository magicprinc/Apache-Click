plugins {
  id 'java-library'
  id 'idea'
  id 'maven-publish'

  alias(libs.plugins.lombok)
  alias(libs.plugins.sonarlint)
  alias(libs.plugins.errorprone)
}
println "[INFO] ${project.group}:${project.name}:$version  =>  ${project.archivesBaseName} # JVM: ${System.getProperty("java.version")} Gradle: ${gradle.gradleVersion}"

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://jitpack.io" }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  //options.compilerArgs.addAll(['-Xlint:all,-serial,-unchecked,-rawtypes,-this-escape,-deprecation,-processing', '-parameters'])
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters'])
  options.release.set(17) // javac --release 7..23+
  //options.deprecation = true

  options.errorprone {
    enabled = true
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/(generated|test).*/.*"
    disable("MissingSummary")
    disable("UnusedVariable")
    errorproneArgs = ["--illegal-access=warn"]
  }
}

publishing {// https://docs.gradle.org/current/userguide/publishing_maven.html
  publications {
    maven(MavenPublication){// groupId in gradle.properties;  artifactId == folder name
      from components.java
			suppressPomMetadataWarningsFor('runtimeElements')
    }
  }
}
java {
  withSourcesJar()
//  withJavadocJar()
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:latest.release"
  api(libs.jsr305)// https://javadoc.io/doc/com.google.code.findbugs/jsr305/latest/index.html
  api(libs.errorprone)// https://javadoc.io/doc/com.google.errorprone/error_prone_annotations/latest/index.html

	compileOnly libs.javaxServletApi

  api(libs.slf4jApi, libs.slf4jJCL, libs.slf4jLog4j)

  api 'org.mvel:mvel2:latest.release'// 2.4.14
  api(libs.caffeine)
  api(libs.guava)

  api libs.commonsLang3, libs.apacheCommonsIo, libs.apacheCommonsFileUpload

  //*** TEST TEST TEST

  testImplementation libs.bundles.junit

  testRuntimeOnly libs.slf4jSimple
	testImplementation libs.javaxServletApi

	testImplementation project(':click-mock')
  testImplementation project(':click-ognl')
  testImplementation project(path: ':click-groovy-ps') // groovy is fast and can set private fields, but have problems with type conversions
  testImplementation project(path: ':click-extras')
  testImplementation project(':click-velocity')
}
configurations.configureEach { // .implementation  // https://tomgregory.com/how-to-exclude-gradle-dependencies/
  exclude group: "velocity", module: "velocity" // 1.3 they come from somewhere..
	exclude group: "commons-logging", module: "commons-logging" // spring?
	exclude group: 'org.springframework', module: 'spring-jcl'
	exclude group: "org.apache.logging.log4j", module: "log4j-api"
	exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	exclude group: "log4j", module: "log4j"
	exclude group: "org.jboss.slf4j", module: "slf4j-jboss-logmanager"

	exclude group: "com.mchange", module: "c3p0"
	exclude group: 'com.google.guava', module: 'listenablefuture'
}

idea { module { downloadJavadoc = true; downloadSources = true } }

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  systemProperty("file.encoding", "UTF-8")
  System.setProperty("file.encoding", "UTF-8")
  systemProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
lombok { version = "latest.release" }
sonarLint { ignoreFailures = true }
tasks.named("sonarlintTest").configure {
	onlyIf {
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}

jar {
	from generatePomFileForMavenPublication {
		rename('pom-default.xml', "META-INF/maven/${project.group}/${project.name}/pom.xml")
	}
}

tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}