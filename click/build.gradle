plugins {
  id 'java-library'
  id 'idea'
  id 'maven-publish'

  alias(libs.plugins.lombok)
  alias(libs.plugins.sonarLint)
  alias(libs.plugins.errorProne)
  alias(libs.plugins.palantirGitVersion)
}

if (System.getProperty("version") != null){// явно задали в cmd line: -Dversion=3.14 !-Pversion игнорится
  version = System.getProperty("version").trim()
} else {
  try {
    String gitTag = versionDetails().lastTag.trim().toLowerCase()
    version = gitTag.startsWith("v") ? gitTag.substring(1) : gitTag
    println "[GIT ] ${gitVersion()} - ${versionDetails()}"
  } catch (Throwable ignore){}// NPE if no tag
}//else: without version || version from gradle.properties || -Pversion=
if (version == null || "unspecified" == version.toString())
  version = 'SNAPSHOT'
println "[INFO] ${project.group}:${project.name}:$version  =>  ${project.archivesBaseName} # JVM: ${System.getProperty("java.version")} Gradle: ${gradle.gradleVersion}"

repositories {
  mavenLocal()
  mavenCentral()
}

javadoc {
  options.encoding = 'UTF-8'
  options.addBooleanOption('html5', true)
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters', '-g', '-Xmaxwarns', '999'])
  options.release.set(17) // javac --release 7..21+
  options.deprecation = true

  options.errorprone {
    enabled = true
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/(generated|test).*/.*"
    disable("MissingSummary")
    disable("UnusedVariable")
    errorproneArgs = ["--illegal-access=warn"]
  }
}
// https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
  publications { // artifactId == folder name
    maven(MavenPublication) {
      from components.java
    }
  }
}
java {
  withSourcesJar()
//  withJavadocJar()
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:latest.release"
  api("com.google.code.findbugs:jsr305:latest.release")// https://javadoc.io/doc/com.google.code.findbugs/jsr305/latest/index.html
  api("com.google.errorprone:error_prone_annotations:latest.release")// https://javadoc.io/doc/com.google.errorprone/error_prone_annotations/latest/index.html
  //implementation("javax.annotation:javax.annotation-api:latest.release")

  implementation libs.servletApi

  api('org.slf4j:slf4j-api:1.7.+',
    "org.slf4j:jcl-over-slf4j:1.7.+",
    "org.slf4j:log4j-over-slf4j:1.7.+")

  api 'org.mvel:mvel2:latest.release'// 2.4.14
  api("com.github.ben-manes.caffeine:caffeine:latest.release")
  api('com.google.guava:guava:latest.release')

  api 'org.apache.commons:commons-lang3:3.+'
  api('commons-lang:commons-lang:2.+')
  api 'commons-io:commons-io:2.+'
  api('commons-collections:commons-collections:3.+')
  api('commons-fileupload:commons-fileupload:1.3.+')

  //*** TEST TEST TEST

  testImplementation libs.bundles.junit

  testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.+'

  testImplementation project(':click-mock')
  testImplementation project(':click-ognl')
  testImplementation project(path: ':click-groovy-ps') // groovy is fast and can set private fields, but have problems with type conversions
  testImplementation project(path: ':click-extras')
  testImplementation project(':click-velocity')
}
// https://tomgregory.com/how-to-exclude-gradle-dependencies/
configurations.configureEach { // .implementation
  exclude group: "velocity", module: "velocity" // 1.3 they come from somewhere..
  exclude group: "commons-logging", module: "commons-logging"
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

test {
  useJUnit()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  systemProperty("slf4j.detectLoggerNameMismatch", "true")
  systemProperty("file.encoding", "UTF-8")
  System.setProperty("file.encoding", "UTF-8")
  systemProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
lombok { version = "latest.release"; }
sonarLint { ignoreFailures = true; }

tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}