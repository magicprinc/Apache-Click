plugins {
  id 'java'
  id 'war'
  id 'application'
  id 'idea'
  id 'maven-publish'

  alias(libs.plugins.grettyWebContainer)

	alias(libs.plugins.lombok)
	alias(libs.plugins.sonarlint)
	alias(libs.plugins.errorprone)
}

repositories {
  mavenLocal()
  mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters', '-g', '-Xmaxwarns', '999'])
  options.release.set(17) // javac --release 7..18+
  options.deprecation = true

  options.errorprone {
    enabled = true
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/(build/gen|test).*/.*"
    disable("MissingSummary")
    disable("UnusedVariable")
    errorproneArgs = ["--illegal-access=warn"]
  }
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:latest.release"

	compileOnly libs.javaxServletApi

  implementation project(':click')
  implementation project(':click-extras')
  implementation project(':click-velocity')
  implementation project(':extra-click-charts-enhanced')

  implementation("org.eclipse.jetty.aggregate:jetty-all-server:8.2.0.v20160908")

  // we need to put it in .war
  implementation 'org.slf4j:slf4j-simple:1.7.+'

  //*** TEST TEST TEST
  testImplementation libs.bundles.junit
  testImplementation project(':click-mock')
}
configurations.configureEach { // .implementation  // https://tomgregory.com/how-to-exclude-gradle-dependencies/
	exclude group: "velocity", module: "velocity" // 1.3 they come from somewhere..
	exclude group: "commons-logging", module: "commons-logging" // spring?
	exclude group: 'org.springframework', module: 'spring-jcl'
	exclude group: "org.apache.logging.log4j", module: "log4j-api"
	exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
	exclude group: "log4j", module: "log4j"
	exclude group: "org.jboss.slf4j", module: "slf4j-jboss-logmanager"

	exclude group: "com.mchange", module: "c3p0"
	exclude group: 'com.google.guava', module: 'listenablefuture'
}

publishing {
  publications { // artifactId = folder name
    maven(MavenPublication) {
      from components.java
    }
  }
}
java {
  withSourcesJar()
}

idea { module { downloadJavadoc = true; downloadSources = true } }

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  System.setProperty("file.encoding", "UTF-8")
  System.setProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
lombok { version = "latest.release" }
sonarLint { ignoreFailures = true }
tasks.named("sonarlintMain").configure {
	onlyIf { // gradle build -Psonarlint=true  -or- -Dsonarlint=true
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}
tasks.named("sonarlintTest").configure {
	onlyIf {
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}

gretty {// https://gretty-gradle-plugin.github.io/gretty-doc/Switching-between-servlet-containers.html
	servletContainer = 'tomcat9'
	jvmArgs = ['-ea', '--add-opens=java.base/java.lang=ALL-UNNAMED', '--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED']
}