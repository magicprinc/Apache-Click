plugins {
  id 'java-library'
  id 'idea'
  id 'maven-publish'

	alias(libs.plugins.lombok)
	alias(libs.plugins.sonarlint)
	alias(libs.plugins.errorprone)
}

repositories {
  mavenLocal()
  mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs.addAll(['-Xlint:all,-serial', '-parameters', '-g', '-Xmaxwarns', '999'])

  options.release.set(17) // javac --release 7..21+
  options.deprecation = true

  options.errorprone {
    enabled = true
    disableWarningsInGeneratedCode = true
    excludedPaths = ".*/(generated|test).*/.*"
    disable("MissingSummary")
    disable("UnusedVariable")
    errorproneArgs = ["--illegal-access=warn"]
  }
}
publishing {// https://docs.gradle.org/current/userguide/publishing_maven.html
	publications {
		maven(MavenPublication){// groupId in gradle.properties;  artifactId == folder name
			from components.java
			suppressPomMetadataWarningsFor('runtimeElements')
		}
	}
}
jar {
	from generatePomFileForMavenPublication {
		rename('pom-default.xml', "META-INF/maven/${project.group}/${project.name}/pom.xml")
	}
}
java {
  withSourcesJar()
//  withJavadocJar()
}

dependencies {
  errorprone "com.google.errorprone:error_prone_core:latest.release"

	compileOnly libs.javaxServletApi

  implementation project(':click')
	implementation(libs.slf4jApi, libs.slf4jJCL, libs.slf4jLog4j)

  //*** TEST TEST TEST
  testImplementation libs.bundles.junit

  testRuntimeOnly libs.slf4jSimple

  testImplementation project(':click-mock')
  testImplementation project(':click-velocity')
}

idea { module { downloadJavadoc = true; downloadSources = true } }

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    showStandardStreams = true // show standard out & err of the test JVM on the console
    showExceptions = true
    exceptionFormat = 'full'
  }
  enableAssertions = true
  maxHeapSize = "500m"

  System.setProperty("file.encoding", "UTF-8")
  System.setProperty("user.language", "en")
  Locale.setDefault(new Locale("en", "US"));
}
lombok { version = "latest.release" }
sonarLint { ignoreFailures = true }
tasks.named("sonarlintMain").configure {
	onlyIf { // gradle build -Psonarlint=true  -or- -Dsonarlint=true
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}
tasks.named("sonarlintTest").configure {
	onlyIf {
		(project.hasProperty('sonarlint') && 'true'.equalsIgnoreCase(project.property('sonarlint').toString())) || 'true'.equalsIgnoreCase(System.getProperty('sonarlint'))
	}
}